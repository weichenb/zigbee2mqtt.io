"use strict";(self.webpackChunkvp=self.webpackChunkvp||[]).push([[86062],{70220:(e,t,o)=>{o.r(t),o.d(t,{comp:()=>c,data:()=>s});var a=o(38178);const i={},c=(0,o(66516).A)(i,[["render",function(e,t){const o=(0,a.g2)("RouteLink");return(0,a.uX)(),(0,a.CE)("div",null,[t[8]||(t[8]=(0,a.Lk)("h1",{id:"nous-b4z",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#nous-b4z"},[(0,a.Lk)("span",null,"Nous B4Z")])],-1)),(0,a.Lk)("table",null,[t[6]||(t[6]=(0,a.Lk)("thead",null,[(0,a.Lk)("tr",null,[(0,a.Lk)("th"),(0,a.Lk)("th")])],-1)),(0,a.Lk)("tbody",null,[t[2]||(t[2]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Model"),(0,a.Lk)("td",null,"B4Z")],-1)),(0,a.Lk)("tr",null,[t[1]||(t[1]=(0,a.Lk)("td",null,"Vendor",-1)),(0,a.Lk)("td",null,[(0,a.bF)(o,{to:"/supported-devices/#v=Nous"},{default:(0,a.k6)((()=>t[0]||(t[0]=[(0,a.eW)("Nous")]))),_:1,__:[0]})])]),t[3]||(t[3]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Description"),(0,a.Lk)("td",null,"Curtain switch")],-1)),t[4]||(t[4]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Exposes"),(0,a.Lk)("td",null,"cover (state, position), moving, motor_reversal, calibration, calibration_time, switch_type_curtain")],-1)),t[5]||(t[5]=(0,a.Lk)("tr",null,[(0,a.Lk)("td",null,"Picture"),(0,a.Lk)("td",null,[(0,a.Lk)("img",{src:"https://www.zigbee2mqtt.io/images/devices/B4Z.png",alt:"Nous B4Z"})])],-1))])]),t[9]||(t[9]=(0,a.Lk)("h2",{id:"options",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#options"},[(0,a.Lk)("span",null,"Options")])],-1)),(0,a.Lk)("p",null,[(0,a.Lk)("em",null,[(0,a.bF)(o,{to:"/guide/configuration/devices-groups.html#specific-device-options"},{default:(0,a.k6)((()=>t[7]||(t[7]=[(0,a.eW)("How to use device type specific configuration")]))),_:1,__:[7]})])]),t[10]||(t[10]=(0,a.Fv)('<ul><li><p><code>invert_cover</code>: Inverts the cover position, false: open=100,close=0, true: open=0,close=100 (default false). The value must be <code>true</code> or <code>false</code></p></li><li><p><code>cover_position_tilt_disable_report</code>: Do not publish set cover target position as a normal &#39;position&#39; value (default false). The value must be <code>true</code> or <code>false</code></p></li></ul><h2 id="exposes" tabindex="-1"><a class="header-anchor" href="#exposes"><span>Exposes</span></a></h2><h3 id="cover" tabindex="-1"><a class="header-anchor" href="#cover"><span>Cover</span></a></h3><p>The current state of this cover is in the published state under the <code>state</code> property (value is <code>OPEN</code> or <code>CLOSE</code>). To control this cover publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;state&quot;: &quot;OPEN&quot;}</code>, <code>{&quot;state&quot;: &quot;CLOSE&quot;}</code>, <code>{&quot;state&quot;: &quot;STOP&quot;}</code>. It&#39;s not possible to read (<code>/get</code>) this value. To change the position publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;position&quot;: VALUE}</code> where <code>VALUE</code> is a number between <code>0</code> and <code>100</code>.</p><h3 id="moving-enum" tabindex="-1"><a class="header-anchor" href="#moving-enum"><span>Moving (enum)</span></a></h3><p>Value can be found in the published state on the <code>moving</code> property. It&#39;s not possible to read (<code>/get</code>) or write (<code>/set</code>) this value. The possible values are: <code>UP</code>, <code>STOP</code>, <code>DOWN</code>.</p><h3 id="motor-reversal-binary" tabindex="-1"><a class="header-anchor" href="#motor-reversal-binary"><span>Motor reversal (binary)</span></a></h3><p>Value can be found in the published state on the <code>motor_reversal</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;motor_reversal&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;motor_reversal&quot;: NEW_VALUE}</code>. If value equals <code>ON</code> motor reversal is ON, if <code>OFF</code> OFF.</p><h3 id="calibration-binary" tabindex="-1"><a class="header-anchor" href="#calibration-binary"><span>Calibration (binary)</span></a></h3><p>Value can be found in the published state on the <code>calibration</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;calibration&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;calibration&quot;: NEW_VALUE}</code>. If value equals <code>ON</code> calibration is ON, if <code>OFF</code> OFF. For more details please refer to manufacture&#39;s manual.</p><h3 id="calibration-time-numeric" tabindex="-1"><a class="header-anchor" href="#calibration-time-numeric"><span>Calibration time (numeric)</span></a></h3><p>Value can be found in the published state on the <code>calibration_time</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;calibration_time&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;calibration_time&quot;: NEW_VALUE}</code>. The unit of this value is <code>s</code>. A value with 1 decimal is allowed (e.g. 60.4).</p><h3 id="switch-type-curtain-enum" tabindex="-1"><a class="header-anchor" href="#switch-type-curtain-enum"><span>Switch type curtain (enum)</span></a></h3><p>Value can be found in the published state on the <code>switch_type_curtain</code> property. To read (<code>/get</code>) the value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/get</code> with payload <code>{&quot;switch_type_curtain&quot;: &quot;&quot;}</code>. To write (<code>/set</code>) a value publish a message to topic <code>zigbee2mqtt/FRIENDLY_NAME/set</code> with payload <code>{&quot;switch_type_curtain&quot;: NEW_VALUE}</code>. The possible values are: <code>flip-switch</code>, <code>sync-switch</code>, <code>button-switch</code>. Device behavior for externally connected switch type:</p><ul><li>flip-switch: For such kind of switch the button remains after the push in its position and does not return into neutral position.</li><li>sync-switch: This mode is a special option for a button-switch. “Sync” means that the relay will be automatically synchronized with the physical switch. This mode allows e.g. a more precise angle control of jalousies.</li><li>button-switch: Such kind of switch only transmits a signal as long as button is actually pressed. After the button-push the button returns into neutral position. However, there are 2 ways to press the button, either with a short or longer (typically &gt;1s) push. In dependency of the push the modul generates a different behavior.</li></ul><h2 id="comment" tabindex="-1"><a class="header-anchor" href="#comment"><span>Comment</span></a></h2><p>Consider that indicator_mode and backlight_mode properties are effectively not supported on that device, although actually foreseen in Tuya specs.</p>',17))])}]]),s=JSON.parse('{"path":"/devices/B4Z.html","title":"Nous B4Z control via MQTT","lang":"en-US","frontmatter":{"pageClass":"device-page","title":"Nous B4Z control via MQTT","description":"Integrate your Nous B4Z via Zigbee2MQTT with whatever smart home infrastructure you are using without the vendor\'s bridge or gateway.","addedAt":"2024-06-30T19:12:33.000Z"},"git":{"updatedTime":1751493368000,"contributors":[{"name":"weichenb","username":"weichenb","email":"thomasg@weichenberger4u.de","commits":1,"url":"https://github.com/weichenb"}],"changelog":[{"hash":"e4c66cbc43255f9ca767b170ba2b9683a9fc01cf","time":1751493368000,"email":"thomasg@weichenberger4u.de","author":"weichenb","message":"SC500ZB-v4 adjustment in expose list"}]},"filePathRelative":"devices/B4Z.md"}')}}]);